// Creates styles for a root element contained space
// -----------------------------------------------------------------------------
@mixin container () {
  $latest-inset: 0em;

  @each $bp, $bp-width, $bp-inset in $g-breakpoints {
    // on each pass through, if we have not hit an "auto" inset then store
    // the inset value for use when we do have an auto inset

    @if $bp == 'base' {
      margin-left: $bp-inset;
      margin-right: $bp-inset;
    } @else if $bp == "max-body" {
      @media (min-width: bp(#{$bp})) {
        margin-left: auto !important;
        margin-right: auto !important;
        max-width: $g-max-body-width;
      }
    } @else {
      @media (min-width: bp(#{$bp})) {
        margin-left: $bp-inset;
        margin-right: $bp-inset;
      }
    }
  }
}

// Creates styles for the griddle visual overlay
// -----------------------------------------------------------------------------
@mixin overlay () {
  $latest-inset: 0em;
  @each $bp, $bp-width, $bp-inset in $g-breakpoints {
    // on each pass through, if we have not hit an "auto" inset then store
    // the inset value for use when we do have an auto inset
    @if $bp-inset != auto {
      $latest-inset: $bp-inset;
    }

    @if $bp == "base" {
      display: grid;
      grid-template-columns: $g-column-template;
      grid-column-gap: $g-column-gap;
      pointer-events: none;
      z-index: 200; // reasonably safe high z-index
      position: fixed;
      height: 100%;
      top: 0;
      bottom: 0;
      right: $bp-inset;
      left: $bp-inset;
    } @else if $bp == "max-body" {
      @media (min-width: bp(#{$bp})) {
        left: 50% !important;
        right: auto !important;
        transform: translateX(-50%);
        width: calc(100% - #{$latest-inset * 2});
        max-width: $g-max-body-width;
      }
    } @else {
      @media (min-width: bp(#{$bp})) {
        @if $bp-inset == auto {
          left: 50%;
          right: auto;
          transform: translateX(-50%);
          width: calc(100% - #{$latest-inset * 2});
          max-width: $g-max-body-width;
        } @else {
          left: $bp-inset;
          right: $bp-inset;
        }
      }
    }
  }
}

// Function to create a percentage width spanning n columns.
// -----------------------------------------------------------------------------
@function span($columns, $args...) {
  @return calcSpan($columns, $args, 'percent');
}

// Function to create a decimal width spanning n columns.
// -----------------------------------------------------------------------------
@function span-decimal($columns, $args...) {
  @return calcSpan($columns, $args, 'decimal');
}

// Shared logic to determine a span value for both percent and decimal spans
// -----------------------------------------------------------------------------
@function calcSpan($columns, $args, $returnValue) {
  $processedArgs: calculateSpanArgs($args);
  $gutters: 0;
  $base-column: 0;
  $base-gutter: 0;
  $modifier: 0;
  $extra_gutters: nth($processedArgs, 1);
  $context: nth($processedArgs, 2);

  // set variables to calculate the proper return value for either
  // span() or span-decimal()
  @if $returnValue == 'percent' {
    $base-column: $g-column;
    $base-gutter: $g-gutter;
    $modifier: 1;
  } @else if $returnValue == 'decimal' {
    $base-column: $g-column-decimal;
    $base-gutter: $g-gutter-decimal;
    $modifier: 1.0000000001; // coerce final value to float, but do not modify
  }

  // determine how many total gutters we need to account for
  @if $columns == 0 {
    $gutters: $extra_gutters;
  } @else {
    $gutters: $extra_gutters + ($columns - 1);
  }

  // calculate our possibly modified by a provided context
  $value: 0;
  @if $context != 0 {
    $value: ((($columns * $base-column) + ($gutters * $base-gutter)) / $context) * $modifier;
  } @else {
    $value: (($columns * $base-column) + ($gutters * $base-gutter)) * $modifier;
  }

  // return the correct value type
  @if $returnValue == 'percent' {
    @if getUnit($value) == '%' {
      @return $value;
    } @else {
      @return percentage($value);
    }
  } @else if $returnValue == 'decimal' {
    @return $value;
  }
}

// helper function to determine if span() args are gutters or context
// -----------------------------------------------------------------------------
@function calculateSpanArgs($args) {
  $extra_gutters: 0;
  $context: 0;

  @if length($args) {
    @for $i from 1 to length($args) + 1 {
      // if the first argument is not a % or a float then assume it's the extra gutters value
      // if it is a % value or a float then it is a context
      @if (
        $i == 1 and type-of(nth($args, $i)) == 'number'
        and getUnit(nth($args, $i)) != '%'
        and round(nth($args, $i)) == nth($args, $i)
      ) {
        $extra_gutters: nth($args, $i);
      } @else if ($i == 1 and type-of(nth($args, $i)) == 'number') {
        $context: nth($args, $i);
      }
      // if there is a 2nd argument it should be the context
      @if ($i == 2 and type-of(nth($args, $i)) == 'number') {
        $context: nth($args, $i);
      }
    }
  }

  @return [$extra_gutters, $context];
}


// adds bleeds up to a max $g-bleed-max-width if defined.
// assumes that your element is already positioned on the edge of the grid
// within a container context
// -----------------------------------------------------------------------------
@mixin bleed(
  $direction: 'left',
  $start-at: 'base',
  $unset-child: false
) {

  $target-bp: nested-map-get($g-breakpoints, 1, $start-at);
  $target-bp-width: false;

  @if ($target-bp) {
    $target-bp-width: nth($target-bp, 2);

    @each $bp, $bp-width, $bp-inset in $g-breakpoints {
      @if $bp == $start-at {
        @media (min-width: bp(#{$bp})) {
          body & {
            box-sizing: content-box;
          }
        }
      }

      @if $bp-width >= $target-bp-width {
        @debug "divider offset: #{$direction}";
        @if $bp-inset != 'auto'
          or $direction == 'left-full'
          or $direction == 'right-full'
          or $direction == 'both-full' {
          @media (min-width: bp(#{$bp})) {
            body & {
              @if ($direction == 'both')
              or $direction == 'both-full' {
                padding-right: $bp-inset;
                padding-left: $bp-inset;
                margin-right: - $bp-inset;
                margin-left: - $bp-inset;
              } @else {
                padding-#{$direction}: $bp-inset;
                margin-#{$direction}: - $bp-inset;
              }

              @if $unset-child {
                & > *:first-child {
                  width: calc(100% + #{$bp-inset});
                }
              }
            }
          }
        } @else {
          @media (min-width: bp(#{$bp})) {
            body & {
              @if ($direction == 'both') {
                padding-left: calc((100vw - var(--scrollbar-width) - #{$g-max-body-width}) / 2);
                padding-right: calc((100vw - var(--scrollbar-width) - #{$g-max-body-width}) / 2);
                margin-left: calc(((100vw - var(--scrollbar-width) - #{$g-max-body-width}) / 2) * -1);
                margin-left: calc(((100vw - var(--scrollbar-width) - #{$g-max-body-width}) / 2) * -1);
              } @else {
                padding-#{$direction}: calc((100vw - var(--scrollbar-width) - #{$g-max-body-width}) / 2);
                margin-#{$direction}: calc(((100vw - var(--scrollbar-width) - #{$g-max-body-width}) / 2) * -1);
              }
            }
          }
        }
      }
    }
  }
}